# Vamos a centrar todas las figuras y a dejarlas a un tamaño más cómodo
knitr::opts_chunk$set(fig.align='center', fig.width=6, fig.height=4, out.width='70%')
ruta <- "C://Users//Mario//Documents//RProjects//Factores pronóstico cáncer de mama - UGCIOM//datosm_icb.txt"
datos <- read.table(ruta, header = TRUE, sep = " ",
dec = ".", na.strings = "NA",
stringsAsFactors = TRUE)
setwd("C:/Users/Mario/OneDrive/Académico/Universidad/UMA/AA Ingeniería de la Salud/Tercer Año/Estadística/Programación en R/Estadistica-basica-con-R")
git status
knitr::opts_chunk$set(fig.align='center', fig.width=6, fig.height=4, out.width='70%')
xi <- 1:6
fi_x <- 1:0:5
fi_x
fi_x <-
xi
fi_x <-
xi
xi <- 1:6
fi_x <-
xi
xi <- 1:6
fi_x <-
xi
xi
# Funciones
# Función que calcula las frecuencias absolutas dados unos datos crudos
calc_ni <- function(datos_in, xi_in) {
ni <- sapply(xi_in, function(valor) {
sum(datos_in == valor)
})
return(ni)
}
# Función que calcula las frecuencias relativas de cada dato
calc_fi <- function(datos_in, ni_in) {
total <- sum(ni_in)
fi <- sapply(ni_in, function(valor) {
valor/total
})
return(fi)
}
# Función que calcula la frecuencia acumulada. Se puede dar la relativa o absoluta para este fin, sirve para ambas
calc_acumulada <- function(frecuencia_in) {
frec_acumulada <- c(frecuencia_in[1])
for (i in 2:length(frecuencia_in)) {
frec_acumulada <- c(frec_acumulada,
frec_acumulada[i-1] + frecuencia_in[i])
}
return(frec_acumulada)
}
# Calcula la media ponderada de unos datos dada su tabla de frecuencias
calc_media_ponderada <- function(datos) {
return(sum(datos$xi * datos$fi))
}
# Calcula el momento de orden "r" (dado) de una tabla de frecuencias
calc_momento <- function(orden, datos) {
media <- sum(datos$xi * datos$fi)
resultado <- sapply(1:length(datos$xi), function(i) {
(datos$xi[i] - media)^orden * datos$fi[i]
})
return(sum(resultado))
}
# Calcula la desviación típica de una tabla de frecuencias
calc_sd <- function(datos) {
media <- sum(datos$xi * datos$fi)
resultado <- sapply(1:length(datos$xi), function(i) {
(datos$xi[i] - media)^2 * datos$fi[i]
})
return(sqrt(sum(resultado)))
}
# Calcula las marcas de clase de una lista de vectores que representan los límites de los intervalos:
# list(c(inf1, max1), c(inf2, max2), ..., c(infN, maxN))
calc_marcas_clase <- function(intervalos){
marcas <- sapply(intervalos, function(valor) {
(valor[1] + valor[2])/2
})
return(marcas)
}
# Dado un valor C(k) y una tabla de frecuencias con sus intervalos inferiores y superiores en columnas distintas, te calcula el percentil en el que cae
calc_percentil_k <- function(ck, datos) {
fila <- which(ck >= datos$vida_media_inf & ck < datos$vida_media_sup)
li_1 <- datos$vida_media_inf[fila]
ai <- datos$vida_media_sup[fila] - li_1
resultado <- ((ck - li_1) * (datos$ni[fila] / ai) + datos$Ni[fila-1] ) * 1/sum(datos$ni)
return(resultado)
}
# Dato un valor k tal que k < 1 (es decir, no en porcentaje sobre 100, sino en decimal) se calcula el decil. Por ejemplo, para calcular Q1 podríamos dar k = 0.25, el P99, k = 0.99, etc
calc_decil_k <- function(datos, k) {
return(min(datos$xi[datos$Fi >= k]))
}
# Dada una tabla de frecuencias y, opcionalmente, un coeficiente diferente a 1,5 podemos calcular todos los outlier de la distribución.
calc_outliers <- function(datos, coeficiente = 1.5) {
Q1 <- calc_decil_k(datos, 0.25)
Q3 <- calc_decil_k(datos, 0.75)
IQR <- Q3 - Q1
IS <- Q3 + coeficiente * IQR
II <- Q1 - coeficiente * IQR
outliers <- datos$xi[sapply(datos$ni, function(valor) {
valor > IS || valor < II
})]
return(outliers)
}
# Dadas dos poblaciones como vectores, compara sus dispersiones usando el coeficiente de variación.
comparar_dispersion <- function(p1, p2) {
cv1 <- sd(p1) / abs(mean(p1))
cv2 <- sd(p2) / abs(mean(p2))
if (cv1 > cv2) {
return("p1 tiene una mayor dispersión")
} else if (cv1 < cv2) {
return("p2 tiene una mayor dispersión")
} else {
return("Ambas poblaciones tienen la misma dispersión")
}
}
xi <- 1:5
fi_x <- c(0.02,0.02,0.02,0.02,0.02)
datos_x <- data.frame(
xi = xi,
fi = fi_x
)
yi <- c(-1,2,3,4,7)
fi_y <- c(0.05, 0.2, 0.5, 0.2, 0.05)
datos_y <- data.frame(
xi = yi,
fi = fi_y
)
apuntamiento_x <- calc_momento(datos = datos_x, orden = 4) / calc_sd(datos = datos_x)
apuntamiento_x
apuntamiento_x <- (calc_momento(datos = datos_x, orden = 4) / calc_sd(datos = datos_x) ^ 4) - 3
xi <- 1:5
fi_x <- c(0.02,0.02,0.02,0.02,0.02)
datos_x <- data.frame(
xi = xi,
fi = fi_x
)
yi <- c(-1,2,3,4,7)
fi_y <- c(0.05, 0.2, 0.5, 0.2, 0.05)
datos_y <- data.frame(
xi = yi,
fi = fi_y
)
apuntamiento_x <- (calc_momento(datos = datos_x, orden = 4) / calc_sd(datos = datos_x)^4 ) - 3
apuntamiento_y <- (calc_momento(datos = datos_y, orden = 4) / calc_sd(datos = datos_y)^4 ) - 3
print(paste("Apuntamiento x: ", apuntamiento_x, "\n Apuntamiento y: ", apuntamiento_y))
print(paste("Apuntamiento x: ", apuntamiento_x, "\nApuntamiento y: ", apuntamiento_y))
print(paste("Apuntamiento x: ", apuntamiento_x, "Apuntamiento y: ", apuntamiento_y))
ggplot(datos_x, aes(x = x, y = valor, color = grupo)) +
geom_point() +
theme_minimal() +
labs(x = "Observación", y = "Valor", title = "Comparación de Dispersión") +
scale_color_manual(values = c("Peso" = "blue", "Altura" = "red"))
library(ggplot2)
ggplot(datos_x, aes(x = x, y = valor, color = grupo)) +
geom_point() +
theme_minimal() +
labs(x = "Observación", y = "Valor", title = "Comparación de Dispersión") +
scale_color_manual(values = c("Peso" = "blue", "Altura" = "red"))
library(ggplot2)
xi <- 1:5
fi_x <- c(0.02,0.02,0.02,0.02,0.02)
datos_x <- data.frame(
xi = xi,
fi = fi_x
)
yi <- c(-1,2,3,4,7)
fi_y <- c(0.05, 0.2, 0.5, 0.2, 0.05)
datos_y <- data.frame(
xi = yi,
fi = fi_y
)
apuntamiento_x <- (calc_momento(datos = datos_x, orden = 4) / calc_sd(datos = datos_x)^4 ) - 3
apuntamiento_y <- (calc_momento(datos = datos_y, orden = 4) / calc_sd(datos = datos_y)^4 ) - 3
print(paste("Apuntamiento x: ", apuntamiento_x, "Apuntamiento y: ", apuntamiento_y))
# Calcular la media y desviación estándar para los datos_x y datos_y
media_x <- sum(datos_x$xi * datos_x$fi)
desv_x <- sqrt(sum(datos_x$fi * (datos_x$xi - media_x)^2))
media_y <- sum(datos_y$xi * datos_y$fi)
desv_y <- sqrt(sum(datos_y$fi * (datos_y$xi - media_y)^2))
# Función para la densidad de la distribución normal
dnorm_x <- function(x) dnorm(x, mean = media_x, sd = desv_x)
dnorm_y <- function(x) dnorm(x, mean = media_y, sd = desv_y)
# Crear el gráfico
ggplot() +
geom_point(data = datos_x, aes(x = xi, y = fi), color = "blue") +
geom_point(data = datos_y, aes(x = xi, y = fi), color = "red") +
stat_function(fun = dnorm_x, color = "blue", args = list(mean = media_x, sd = desv_x)) +
stat_function(fun = dnorm_y, color = "red", args = list(mean = media_y, sd = desv_y)) +
theme_minimal() +
labs(x = "Valor", y = "Frecuencia", title = "Distribuciones y Curvas Normales")
library(ggplot2)
xi <- 1:5
fi_x <- c(0.02,0.02,0.02,0.02,0.02)
datos_x <- data.frame(
xi = xi,
fi = fi_x
)
yi <- c(-1,2,3,4,7)
fi_y <- c(0.05, 0.2, 0.5, 0.2, 0.05)
datos_y <- data.frame(
xi = yi,
fi = fi_y
)
apuntamiento_x <- (calc_momento(datos = datos_x, orden = 4) / calc_sd(datos = datos_x)^4 ) - 3
apuntamiento_y <- (calc_momento(datos = datos_y, orden = 4) / calc_sd(datos = datos_y)^4 ) - 3
print(paste("Apuntamiento x: ", apuntamiento_x, "Apuntamiento y: ", apuntamiento_y))
# Calcular la media y desviación estándar para los datos_x y datos_y
media_x <- sum(datos_x$xi * datos_x$fi)
desv_x <- sqrt(sum(datos_x$fi * (datos_x$xi - media_x)^2))
media_y <- sum(datos_y$xi * datos_y$fi)
desv_y <- sqrt(sum(datos_y$fi * (datos_y$xi - media_y)^2))
# Función para la densidad de la distribución normal
dnorm_x <- function(x) dnorm(x, mean = media_x, sd = desv_x)
dnorm_y <- function(x) dnorm(x, mean = media_y, sd = desv_y)
# Crear el gráfico
ggplot() +
geom_point(data = datos_x, aes(x = xi, y = fi), color = "blue") +
geom_point(data = datos_y, aes(x = xi, y = fi), color = "red") +
stat_function(fun = dnorm_x, color = "blue", args = list(mean = media_x, sd = desv_x)) +
stat_function(fun = dnorm_y, color = "red", args = list(mean = media_y, sd = desv_y)) +
theme_minimal() +
labs(x = "Valor", y = "Frecuencia", title = "Distribuciones y Curvas Normales")
# Crear el gráfico
ggplot() +
geom_point(data = datos_x, aes(x = xi, y = fi), color = "blue") +
geom_point(data = datos_y, aes(x = xi, y = fi), color = "red") +
theme_minimal() +
labs(x = "Valor", y = "Frecuencia", title = "Distribuciones y Curvas Normales")
print(paste("Apuntamiento x: ", apuntamiento_x, "Apuntamiento y: ", apuntamiento_y))
library(ggplot2)
xi <- 1:5
fi_x <- c(0.02,0.02,0.02,0.02,0.02)
datos_x <- data.frame(
xi = xi,
fi = fi_x
)
yi <- c(-1,2,3,4,7)
fi_y <- c(0.05, 0.2, 0.5, 0.2, 0.05)
datos_y <- data.frame(
xi = yi,
fi = fi_y
)
apuntamiento_x <- (calc_momento(datos = datos_x, orden = 4) / calc_sd(datos = datos_x)^4 ) - 3
apuntamiento_y <- (calc_momento(datos = datos_y, orden = 4) / calc_sd(datos = datos_y)^4 ) - 3
print(paste("Apuntamiento x: ", apuntamiento_x, "Apuntamiento y: ", apuntamiento_y))
# Calcular la media y desviación estándar para los datos_x y datos_y
media_x <- calc_media_ponderada(datos = datos_x)
sd_x <- calc_sd(datos = datos_x)
media_y <- calc_media_ponderada(datos = datos_y)
sd_y <- calc_sd(datos = datos_y)
# Función para la densidad de la distribución normal
dnorm_x <- function(x) dnorm(x, mean = media_x, sd = sd_x)
dnorm_y <- function(x) dnorm(x, mean = media_y, sd = sd_y)
# Crear el gráfico
ggplot() +
geom_point(data = datos_x, aes(x = xi, y = fi), color = "blue") +
geom_point(data = datos_y, aes(x = xi, y = fi), color = "red") +
theme_minimal() +
labs(x = "Valor", y = "Frecuencia", title = "Distribuciones y Curvas Normales")
# Crear el gráfico
ggplot() +
geom_point(data = dnorm_x, aes(x = xi, y = fi), color = "blue") +
geom_point(data = datos_y, aes(x = xi, y = fi), color = "red") +
theme_minimal() +
labs(x = "Valor", y = "Frecuencia", title = "Distribuciones y Curvas Normales")
# Crear el gráfico
ggplot() +
geom_point(data = dnorm_x, aes(x = xi, y = fi), color = "blue") +
geom_point(data = datos_y, aes(x = xi, y = fi), color = "red") +
theme_minimal() +
labs(x = "Valor", y = "Frecuencia", title = "Distribuciones y Curvas Normales")
# Crear el gráfico
ggplot() +
geom_point(data = datos_x, aes(x = xi, y = fi), color = "blue") +
geom_point(data = datos_y, aes(x = xi, y = fi), color = "red") +
theme_minimal() +
labs(x = "Valor", y = "Frecuencia", title = "Distribuciones y Curvas Normales")
print(paste("Apuntamiento x: ", apuntamiento_x, "Apuntamiento y: ", apuntamiento_y))
library(ggplot2)
xi <- c(1,2,3,4,5)
fi_x <- c(0.02,0.02,0.02,0.02,0.02)
datos_x <- data.frame(
xi = xi,
fi = fi_x
)
yi <- c(-1,2,3,4,7)
fi_y <- c(0.05, 0.2, 0.5, 0.2, 0.05)
datos_y <- data.frame(
xi = yi,
fi = fi_y
)
apuntamiento_x <- (calc_momento(datos = datos_x, orden = 4) / calc_sd(datos = datos_x)^4 ) - 3
apuntamiento_y <- (calc_momento(datos = datos_y, orden = 4) / calc_sd(datos = datos_y)^4 ) - 3
print(paste("Apuntamiento x: ", apuntamiento_x, "Apuntamiento y: ", apuntamiento_y))
# Calcular la media y desviación estándar para los datos_x y datos_y
media_x <- calc_media_ponderada(datos = datos_x)
sd_x <- calc_sd(datos = datos_x)
media_y <- calc_media_ponderada(datos = datos_y)
sd_y <- calc_sd(datos = datos_y)
# Crear el gráfico
ggplot() +
geom_point(data = datos_x, aes(x = xi, y = fi), color = "blue") +
geom_point(data = datos_y, aes(x = xi, y = fi), color = "red") +
theme_minimal() +
labs(x = "Valor", y = "Frecuencia", title = "Distribuciones y Curvas Normales")
mean(datos_x)
calc_media_ponderada(datos_x)
